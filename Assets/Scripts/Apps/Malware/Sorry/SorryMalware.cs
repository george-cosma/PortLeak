using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class SorryMalware : Malware
{
	[Header("Sorry Malware")]
	[Header("Stage 1")]
	[SerializeField]
	protected GameObject Stage1Holder;
	[SerializeField]
	protected Button Stage1YesButton;
	[SerializeField]
	protected Button Stage1NoButton;

	[Header("Stage 2")]
	[SerializeField]
	protected GameObject Stage2Holder;
	[SerializeField]
	protected Button Stage2YesButton;
	[SerializeField]
	protected Button Stage2NoButton;

	[Header("Stage 3")]
	[SerializeField]
	protected GameObject Stage3Holder;
	[SerializeField]
	protected Button Stage3YesButton;
	[SerializeField]
	protected Button Stage3NoButton;

	[Header("Stage 4")]
	[SerializeField]
	protected GameObject Stage4Holder;
	[SerializeField]
	protected Button Stage4ExitButton;

	private void Start()
	{
		Stage1Holder.SetActive(true);
		Stage2Holder.SetActive(false);
		Stage3Holder.SetActive(false);
		Stage4Holder.SetActive(false);

		Stage1YesButton.onClick.AddListener(DoFailure);
		Stage1NoButton.onClick.AddListener(AdvanceToStage2);

		Stage2YesButton.onClick.AddListener(AdvanceToStage3);
		Stage2NoButton.onClick.AddListener(AdvanceToStage3);

		Stage3YesButton.onClick.AddListener(DoFailure);
		Stage3NoButton.onClick.AddListener(AdvanceToStage4);

		Stage4ExitButton.onClick.AddListener(DoSuccess);
	}

	public override void DoTimeUp()
	{
		
	}

	public override void DoFailure()
	{
		// TODO: Report Game Failure
		base.DoFailure();
	}


	private void AdvanceToStage2()
	{
		Stage1Holder.SetActive(false);
		Stage2Holder.SetActive(true);
		Stage3Holder.SetActive(false);
		Stage4Holder.SetActive(false);
	}

	private void AdvanceToStage3()
	{
		Stage1Holder.SetActive(false);
		Stage2Holder.SetActive(false);
		Stage3Holder.SetActive(true);
		Stage4Holder.SetActive(false);
	}

	private void AdvanceToStage4()
	{
		Stage1Holder.SetActive(false);
		Stage2Holder.SetActive(false);
		Stage3Holder.SetActive(false);
		Stage4Holder.SetActive(true);
	}
}
